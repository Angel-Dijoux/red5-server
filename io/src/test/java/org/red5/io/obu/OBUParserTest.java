package org.red5.io.obu;

import static org.junit.Assert.assertTrue;

import java.util.LinkedList;
import java.util.List;

import org.junit.Test;
import org.red5.io.rtp.AV1Packetizer;
import org.red5.io.utils.IOUtils;

public class OBUParserTest {

    @Test
    public void TestAll() throws Exception {
        // fragmented across two RTP packet payloads
        byte[] buffer = IOUtils.hexStringToByteArray(
                "680b0800000024c4ffdf00680230106a7440c71c7116c6500000002d04bb0a1254d78ddb5ef291eec6feaee51e5d2ef203eb4a8e94a1123f6af89754145bd9355aae123019031818855639dec9d6ec68665aff33826db7fd981255db7c347295453229199c9ee787ccde2cf87ca0ebffe0a2d7ab86849c7f9a87befae46e977d89998442eddbb5414d39f5948a957db5a87a18e6bd562b05d22811435c7efdc2a4a3953534c47fff31ff180b94d7e50c27518a83a17113512d264cfe5e2832f48522862f7920f5bead27d103696b67bfadafec061ed4e773c301ff1979868ea2dfcb37dff35f3b47d86ebc565fb20551730b30c637056710fe3d472c4ab1778a728a8649902c4219d4f09dad2aaab1c52730af0bf9da96304ee1f02b2d51f06c6ec0b2fd7b39b51ba4d569e59587fcfeb4315f4fbba3be251763a53a4a1a73f970a508069f5a2f07263ec0f2d6051098337d8bab7f00722c884beaaac8adfefe8ff3e34be4691076f75f69ee09e9bab907fa85b24509a2ba6e7567ece248bfa3b3ce4d2f252966ba44866a53f10c1d9f3ae816051426317301df23aa5c0469cd47b7ffd7898207b140a8a601e3bd22b2da8762de3d1776dc3f8b3401ba09de9544bd5c0eb3a5c58e1dacd82f1dbe2562a576275e775c936c9b761dfb6fb3e12e39b5f3ba5ab0ab1f73a963e8b54f80d3b2e1a0883b2acc5f40bc5f958906a9faeae4e340bca368a4f094e3f70a1ba76d0ff73d5e9a77aee70283071e88d3bfc2007beaa9d51b5e813bcc497837c49fc7a0375bdebc7354af014afb437e808b1c0686878b573da9ef4020211a1bf48a8001cbb21190d6aa2168f80601423914f1ab3bbfdc17fdec80e6ea3e2b851bab43cb84ed8f5797f4f5487d1bfca9e0c5bf86845333af055208ab92883ffa405fe9fdb6ecd24f303b3ca84f838833b258e137b699854c36810ea8a44c94af8ede1854052869d8eb178694fc3c0e792587ec6c07e3e21e6ae3ea2ad8287e0224ef3972b3a56ef7b4c8c62a586fb022535470f6008dbc549d79c81701f87ce2167a8542b6a9e5a45aa58e28193581c9c189e3db7fdc5a4615d3589db937033fcabcd5c934f3c59b90bd2c707f67053b157d5b03a6780b53e7cc63e96419b62f2fa705e294921580be726b6dc83a1d7a1b5455361ce9a99bb2ab0d53487374c1339097ddc15f5e82d07bc1628b5d91905626f0787f632a14d0c5e23cbdc58bfa9e1e15c09f25f91403fa830a4498c7aece817102421f7498b61ed6ba73735e8a083927893e67484b1fd331eedfce2af51e3ab6a1627ef6481497c7af5790063b4aa41d16d97823a3832137a36277519c796bcdeb918402369e639b4db1f2a0275b42882574077a65f3709a1a8f87b9a538f1335627b0f64a23217a36cc5866a438d49d9463de1879e5d3780f4a73e16f13e550ed726767e02eec80b3ddbfe1db81246131111f20078cb4220a463b3f6a98f6223896068913afaeddbdbf356ba99f4204ac7c6cd0be8a39ee956878d21c9333a2ce380575c497415fdb55102c02bbc4d26716a642f4f4b6165970e4ccbe024e7aa3adadbee6ee98b900316c90a6e749400f86dd50d9251da9499ab02cedc824454bbaa4c05aa802baaf53af107850cfb949193b582ab5dbe2");
        byte[] buffer2 = IOUtils.hexStringToByteArray(
                "d03dea919e0c20f6f77b8768cbbcbf64bf5cf95fdaf918c56e93d2ac1a282d962bf8b508fe76ba48fe3e9245f3072f8f7ae4a96e10d07dc23d4d1e7169ff50e7f82f3e75b4d1c769a575121fa4b2fe3c8ff52b6f4ebddcfe0b8b6d09630aa8ded076ebad13e23f90f6dd0a3d08bf30a4e3f6adfd18de784cb2e3ea40fa198f071def1c4b4175ba07d55d6896dd016a6637fa44ca5b1701a736ab4c07213194e017772329e2e8f83807e79debe528d8025bfc0674804981b862440620e1fda5e529557586ce60dd394bc4b575b296e07fa547c84f70314bf0a3451b3a7e912fbcd4488fe7f71bd0591ed7c3a216a5f3b724a249ff716507660c1b6930b160ec9746cf9ecfbf500005178c519f96ab730c8a4a430bce6e94a65b0dbab217523854a7480ce42e2b7c5ed51e28256579b1c86bda94c27d9ed606c22cb5e6240cc1354aa19cdc32fefd71aef6d5d05a5d0f0d57aae7a2475ecbedc23c02d365e04522578e30f1c42167decbfabe3e0d6025815863e92ea3ad209d1f6c693bc39025c397f186d25c438300bd1c5a146f96ee490afe501e5b92ed80af78171b2871a1ff501c5927120187ca207d0118e8173e57745da8403a0ba90787dbdb4e490607d99a1f12b80a59bed2979bbcb96fabd142f0a56c735ec2bc7604b5e03f37f306af8a1fa884152c4ed2a6be6076458b7c48e9ad8c0f965fe8a7e7afdcd28c36c3e1b42282b81b6be15b85bca04f1d641d3fe0c331317a53767c57311a6a9900a3597fd6df51416d626a995cfc955b0628b9f45b4537a4148317a5d6b9a750d0c3b4c5c81571419ea0b6155443dd6e96bca398b1eb93a8579cde860578c4bdbbab2dbd2f03df2c25767b242ee15ac2bf679af211c4c885514d937d0128c7409c3e4856c3b67b62dc66a262e9e022446ac672ea3c34dfd4afbfdbd5e46d5304cd12a6e1f7e9103aa27d0798da79398a6076c03fc1d08c9aa578cae22e2e52e6817a42fd66c039548cf49b706c13a28aa69d1209e2b57c4f976b4d5d85cd9a01efd94aedbe67199592b0fd63bab2e32da4bcd80a0ce1c0d1466098d3d73895cbaab8f4b232d3b6cebb4129a9480aefabba61280893d05e80354698b3fea8bd09322345d75f80caa7ec3cd944fff4e8cec5b9eb787acd0ea8acb976201c61ce6fec3518d5e449d8315125587ffa20a71212e56ceef00b5f7731f894af79bb605cef7ad0016f9f6ceb529f5a465bf3032a0122b04e475d077e2ba4e2b1ff9bbfc06499d150bb1c374d4714eb469b4b907e59de114445b8e3da174fc7052c11df0a9520c0b8e2cc0de2025ed6499a7c7d39e0a72d38c0f9e9bbb6417e735c0713eb6cd4396907840d88a58b681be57ada23ae10c6f0a16208ec85fcc5418052fff1a85dc0dfcfea5e2f0cacc778bb3a29c30dab4f232698ae3ab0fbdc81c14b659b2d4ede4e32fa40466350c9dc0bac22b272cf545df53f5c04033f11311f1f230f811e0107594e1da81586088a646607ed279231474c2957b4fbfeb7ec26c4cd5964046f15b31db8c73bc8753cf8888b46c9a9077f6f6a88babb84a2a351a67ba69550d8146ddbda35b9a218f57df518a2a5551d4f48d2998bc43fe6f784e368e0ab9eca0844e20cfdf5805446cd840656c484dd89e65d041734a65f");

        // non-fragmented
        byte[] bufferx = IOUtils.hexStringToByteArray(
                "680c080000002cd6d30cd50200803010c3c007fffff8b730c000008817f90ccfc67b9c0dda558282672ff007265df6c6e312ddf9717743e6baf2ce36086392acbbbd264c05529109f537b518be5c95b12c132781c2528caf27caf293d62e4632ed7187901d0b84467fd157c10dc75b41bb8a7de92cae36981339b90c664705a2df55c409abe4fb115236278886f34abbef40a7852afe9228e4cecedc4bd0aa3cd5167674e2fa34914fdc2beaae713674e12af3d353e8ecd663f66a759568cc99be17d83b875b94dcec3209184b3758b567fbdf666c169eba72c621ac026d6b17f968222e10d7dffb24697caf1164807a9d09c41ff1d73c5ac22c8ef5ffeec27ca1e4cb1c6dd8150e403685e704bb64ca6ad9218e95a083951048fa005490e98186a04a6ebe9bf0730a17bb578117afd6701fe86d32591439d81dec59e4984d44f34f7b47d9923bd95c98d5f1c98b9db165b3e187a46acc429666db5ff9e1a172b605021fa3143efe997feb42cf760919d2d299751c67da4df487e5558bed0182f6d61c5c05969679c1618774cd298327ae47873634abc47376581b4aec0e4c2fb176087faffa6d8cdee4ae5887e7a027050df5a7fb2a7533d93b6560a41327a5e51b83787ad7ec0ced8be64e8ffe6b5dbba8ee38816f0923088f07210939f0f80317242a224484e15cf34f20dcc1e7ebbc0bfb7b2066a427e201b35fb747a1884b8c47da369860d746920b7e5b4e34501267508de7c9e496efae2bc7fa362905f592bd62b7bb9066e0ad143ee7b424f304cf221486a4b8fb8356ceaab4875a9ef20bafad40e1b55c6ba7ee9fbb1a684dc3bf224dbe5852c9cc0d8804f1f8d4fbd6adcf1384d62f900c5fb4e2d829268d7c6bab91913c25399c86083954590da4a8319fa3bcc2cbf93049c3680efc2b9fce5902fad44e11490d930cae57d774dd131a157910cc99329b576d53751f6dbbe4bca9d4db06e709b06fcab3b1edc50b8d8e70b0bf8bad2f2992dd5a193dcacaed052625eeeea9dda0e378e056992fa13f075e91fbc4b3acee07a46acb42aedf09e7d0bbc6d438587db445983821c8c13c81127e3703a8ccf3f9d99d8fc1a1ccc11be3a893912c0ae81f28134407685a8f274118c931c4c171e2f0c4f41eac29492fd0c09813a6bc5e3428a730138db4ca91266cda35b5f1bf3f353b87376340597349065904e084163ae8c428d1f5119c34f45ac0f867471c9063bc06392e8aa5a0f16b41b116bdb9507872918e8c990f7d997e773685871f2e471355f807ba7b1caabf20d0fac4e1d0b3e4f4f9578d56194adc4c83c8f130c0b5df672558d80941372e0b472b864b7338f0a06b8330803e46b509c86d3e97aa704e8c7529ec8a374a81fd92f129f0e89d8cb4392d6706cd5f250230bb6b4193551e0cc96eb5d59f80f47d9d8a0d8d3b1514c9df039c78394ea0dc3a1b8cdfaaed25da60dd306409cc9453a1adfd9ee76515b8b1da9a288051889392e303df70ba1b593bb48ab60b0aa848dfcc744c718008ecc88a73f50e3dec16f632fdf36bbaa965d187e256cdde2ca41b2581b2edeae91107f517d0ca5d07b9b2a9a9ee42339321305ed258fddd730db2935877784069ba3c951c61c6c6971cef4d910a42911d1493f57841328a0a43d43e6bb0d80e04");

        AV1Packetizer av1Packetizer = new AV1Packetizer();
        try {
            // fragmented buffer
            //System.out.println("Fragmented buffer(s) total length: " + (buffer.length + buffer2.length));
            int obuCount = av1Packetizer.depacketize(buffer);
            System.out.println("Packetized buffer 1 - " + av1Packetizer + " OBUs: " + obuCount);
            obuCount = av1Packetizer.depacketize(buffer2);
            System.out.println("Packetized buffer 2 - " + av1Packetizer + " OBUs: " + obuCount);
            List<byte[]> obuElements = av1Packetizer.getOBUElements();
            //System.out.println("Depacketized OBUs: " + obuElements.size());
            assertTrue(obuElements.size() == 3);
            List<OBUInfo> obuInfos = new LinkedList<>();
            for (byte[] obu : obuElements) {
                // parse the OBU
                OBUInfo info = OBUParser.getNextObu(obu, 0, obu.length);
                System.out.println(info);
                obuInfos.add(info);
            }
            // reset
            av1Packetizer.reset();
            // packetize the obu info list not the bytes arrays without the OBU header
            List<byte[]> payloads = av1Packetizer.packetize(obuInfos, 1176);
            System.out.println("Payloads: " + payloads.size());
            assertTrue(payloads.size() == 2);

            // run non-fragmented buffer
            //System.out.println("\nNon-fragmented buffer total length: " + bufferx.length);
            obuCount = av1Packetizer.depacketize(bufferx);
            System.out.println("Packetized buffer x - " + av1Packetizer + " OBUs: " + obuCount);

            obuElements = av1Packetizer.getOBUElements();
            //System.out.println("Depacketized OBUs: " + obuElements.size());
            assertTrue(obuElements.size() == 2);
            for (byte[] obu : obuElements) {
                // parse the OBU
                OBUInfo info = OBUParser.getNextObu(obu, 0, obu.length);
                System.out.println(info);
            }
            // reset
            av1Packetizer.reset();
        } catch (Exception e) {
            System.err.println("Error handling AV1 payloads: " + e.getMessage());
        }

        // fragmented buffers from Chrome 126 - mtu 1176
        // first packet in frame: false, last packet in frame: true, start sequence: true count: 2
        byte[] chrome = IOUtils.hexStringToByteArray(
                "680b0800000024c4ffdf0068023010687440c71c7116c6500000000604d80367f6c757deb25b95ece4ce58c22fd1527dd1d85f10a9880ef543f4144eb319f107306befe993447f6a19491fc40a0609f98c947c5af4dec016d216c14054a1bb81ff9555fbd1d4f373d085636bf5c30bf4ea1236afe915b7cc90bc224d1ae96c8089fa677d926e9f5270deda8b41c545ff51117eb12d9bd4a31a1dc42e6862bca79972ec014a410f26d1dd3bf08415f58b445d38e683cdeb49e6d4c677d3e3e3bd21c7d26309ba514d9cb5e3b40da43c04a1f97eafe5d52952805c5c8b54df0b3e08442851ad743218904b03413e1fdae2fa1e6b907906246311412fb4429a52428ad1a621997b8f7db3715237e417b9b069edec211fe64dca0fa247afb29944139c26050f87f5ba35147c8583dc603060773d8bc3ceaa6b9bf81f432704c4fb60a1365e62645311c8d52f5bb76a9b0ae8962c77ecdc13a378dc44b87a643b8c42ad49fe0494844db3db524d17f207729883bc387351895effbbaf689161693cf173c887d421a3454c5a857e12467618139e39b6999bf99f9103456f20b85b2e67947be501519a4469551e3d2fbe19aff32d0060167ef7ad433e1d802d092ffce569065d9fa80bf0a904038fb2fcff9c50dca3dcd4a6a3d8ae1245a8a045d9ef807b3859e0fe9a67854f68e28e02d16a3de9535f302f5f54ca06afca651ac589e0ed8dc68438f3319c8c03bdacaf6ba16b08631b74d90c9268fc724a5ff49ef0fc7a7828597e1c2ad3b5226652d792a0a18a93296356b7890c399da544b1ef43cfebd998245bc3e71ae8f117f937a4ab5fd8c3666146aa285b543de5c4e6cea142d3b4cab2f315dce647817b56edd76313940ce77727acbd0ce89c22aa56cdc24d3e2379e9fd21b35fdd0f7df1b84a14d03bf513aa6dcc7cb9df2d19d6472bd08c2ea63d76e5a6363bc3e80697381d8d758963a493de55d7311aed6e5fe9d63f13bb6bac1666b8db0c30faee5c2fbb33a78e0d6e30622c1ba104d8316085b63f7c2c87db0bac98a3e702abc1e93ece6b2e30990e3e029f5d3c775d4a685746cac2b67722f4fa3da145c12fc888daebdfd16fcf64d6814ee2cfc76956cf71787307c2dfa14b820da8769ce0900230db54cab4613cd134559aea71d5cab8900b9f0c58db602ce7ec8f5b343d60df3b5538c21ae6d8b65e42c8317e8f173ec9f8e149579b5d6ce4825a8df7e02134c336b404f542b188844efee00e83ca852c2f092c4aeaf8e7ac3e2016ffc76d2658e5e0cb136f426d094f25d7ec540755eed7f85c96b530e9a1cb572ce7c5f3fb51452b5cce4954f38cf0989d28560d6ab685acfd0a0764ef2fd833b2f8477f15819191efca08ca551921020c482b54ad4daad11515eab30fc24d86441379489e8df063d44f5aca478f512255c9ebba7e7b3cdc8af56cee02f031f84369b1dbc52c4c234b9f3feb0228d7fc22eeb576fbab10df5262aad1782402bbc4d26356d18dd1015a28d35156f544258a5f283831c110bcf41e58aeeac98b730102bdb8bb43c0a649594881818ba7be71fa75648e0b16af607db9f9c69962dedee9b178fcfb595f05fec60d2d8e6dde481076d7f9d6efc603aed002230b66f5d6671fd33233d451bb26fdf44276bfa693");

        // first packet in frame: true, last packet in frame: true, start sequence: false count: 1
        byte[] chrome2 = IOUtils.hexStringToByteArray(
                "d0338b6416d0d5ff8cd0f603ab4c0437499ce7dcf4953442cb8ecbfef39d98e9dd4f038a9775535689baed236543bfd0ea390fda2ed67eb3f00eb4c1934eeaced3db614ad0889b6b217f2f3689e52dff41f06e6f45433a96066ae70f2ee12e4cd286808655779867dc0ee8a59dbf393bd0a0350f0273187c1fcaaa2c8ec1b81812e76c7c532b7df34b5f8120d845a55e5727b42a98331164436b8be26468e3fd2fea11cfbecd8b22173eae0b0791be5fc2db1fe5917e389abf7e10686c5861baaa34d11a82f6a270e9d5ec9cf5128d428640c7280983ce76be83de19a48dfa6a41fef303bbd188086e518fea799296f674a947ae92764fce5c65cedfed5e3ebdbfd58e4d68fb778afecdf6612fbce3c65f26f96b973d676e88f4299deb1414181bf254cceb3c6ca0baf48704be28786d0b84cb5c6a4408a01da8bbd018816ab8070e8b2fabc27fc9de50e1dcf300eb2171e4401b9de54028f7e015d93595728f385ea6dca8b6bbcfe79aaf3347a761eff54b6fdff9e608d54e7b6500341ef8964fa5a008590e7aee7dc39a7e5b8ca5a3ffdb2f216ae83b3e56f9309c3bf8d5f01973b020ea26e91b8b03bee5b47501dc6994f2d0c9cb41fd3f54844a43ff9434a2ece55f43a162dd29f5955fe711d865ede95f20dd58532e92bcb30193fbea3e90abdf6e3ba9c3a54144c4bfe36454f4406ff1d7ce95a37e89de7a565961d2ac199396cdb9af76ac1c44a6726be64b5c2eb9606c4f9186c52636d19f14416a5647fb5cb65b292992063abcd1f147dd205ad78f477824ca3aefc26a399b8ba351c41c26646d03b41c421dc67fbcd4356a7b8b1916210d0b0e0d8109aa377feb5ebaff2b8181147b59f2c8d29882bd1da5fbc28533137c9bdfae882a25090bd88e1f2a7183fc89f6dde2e053d40816d65ed421997a5d132a866af31496b2e64956f6b56fac0928abd0377552447e2ca26898188e0facfb15bf6233d6fe628c08dedc56a847844519fc60cc0a0062e54f2c976a4e6dd6f687c12dde56be11bdd60bcebc7f8c4baf6361aec8f86f2d31a36459ab6adf2173c0c5f3a91db9262e61f2b34460af5593e45cffc03afb5ab830ba6938d7625e702f84075259e59742f0edcab5fab0de5435188c0927fbf188ca76cd137260c5575862b225db94cae46555adcb60e8d9af96ee6caea9bb267472b7db43bac4938cf47d45a5b1c87be8d24795e5c924c8fe587ceda53b1a60b08cc1aa69295c82b1b17f4cd7c859c223ce3b2af9f58895070882ee223d3a36078d5e275a98c19404e8fb67eed1b628da0dbe625771346baa288ca4c975e485f9919ea900da2c2547eaa67828901c2ee810024a60257d9faf65366a92a360c498524f0b36c0a46dcec6a6d1aea910e633379d1f550d65861dac2d67c71d791d6f21b0f0fed30b964433b5ff7514ec7f9e4676bdde7346818bada3f48f4900646367139d04e4098f690d6e5f8c47cf7af44fe6848a6b16b9b8909330f0d56650bd705c35ca05ba8f5637269e2b6ede71043013bbe543b14a522e8bf1ccec060939f8f1ef31927fd525dc92db9fcf66252ba8e5d59b23b860a9862f01ecd16f76e11c451373229894f548a5edf5fce3c51aa548c62517a0edb26118265059ba0515f8c0dd06c062e82c510f");

        // first packet in frame: true, last packet in frame: false, start sequence: false count: 1
        byte[] chrome3 = IOUtils.hexStringToByteArray(
                "9058075957493623f9f2678ae960ec641c940d02a4621839ebdae2f9f2b7f36462a365f3c0fd5e4f5f405f997905c16a0b9cbbf9792d55500e90fec3c377442d526c6299f668471bd34dddc74dd70506b829fdecc888a462cc931032849ea8ffd76d4bd21f74be6a3e370b24ba7502ac84bc3b2a7e90d1e0153f1a6a8a2378c85509ec5d4ed60f40a9d1a1b1e45b879d40f10fd811b269d3cd83008026fef516f7f20d367225fdc074f6e8b55d9efc456efd9f331e3d4e86ac4d08698421205590b6c1edf04f6ccc29d89b2ece52b101be4dc1005fabc6241af3c6e6635a983c41764691b591765e414bb95330dabf3f3eb8d1f3c20b56d00f1deb0d647e590697884d291642a0fcceff0c8501bec625bac4f116bc4dc2a7e54b8f0f8f065b6a2b4aa1ffae20d338b6cf4d4a556109627d3edf2b30e13b5c0925c3f86d13a01c74cb5b78c4532647927578c85561d34322547cb875978468c0968224a942edee8de3ec63159fb6d0ded4da44005e6463d38a5692ada3879d361e568ef95fa5a3ee5b6e81cd3c6bcb90dd9e93ac809b328738de8c08a0d4810354daefd92d40abf0585123fc4b3048862d8491bfa0248e4bfd62a0f37734eec5ad755684c93838205aaf8e5a37e3a6a30675db9b13f7ef1693be7c6912d5ee4f386cf1597ba74e3e16523d2c0b3fe6fe66709aa8e090efa9573912aabf23e5d8e6ca8bedf39670a5185e31b2cbb4c426841f97dc39be1322fcc5ad0581cbcccfeb2f0504bf276b1490f822337dc1c64d30d53487c2b7a6c05c11e8146fc83191fe7de089ae1cb50d2f6d892436ee75ddd49121c315424f0e806ed7319b25902f2e5a5cea40d74d49c3d254216623df2a2ec0a41fe1dc937e27b0cc1fa02f3487a36f8dbbac02b4c18b0e84959a852da8ed244eac6424fe9d2ab4a30ff305fc");

        /*
        // packetizing
        int mtu = 5;

        byte[] in = new byte[] { 0x01 };
        byte[][] out = new byte[][] { { 0x00, 0x01, 0x01 } };

        LinkedList<byte[]> outList1 = marshal(mtu, in);
        System.out.printf("Equal? %b%n", Arrays.areEqual(out[0], outList1.get(0)));

        byte[] in2 = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05 };
        byte[][] out2 = new byte[][] { { 0x40, 0x02, 0x00, 0x01 }, { (byte) 0xc0, 0x02, 0x02, 0x03 }, { (byte) 0xc0, 0x02, 0x04, 0x04 }, { (byte) 0x80, 0x01, 0x05 } };

        LinkedList<byte[]> outList2 = marshal(mtu, in2);
        System.out.printf("Marshaled entries: %d%n", outList2.size());
        System.out.printf("Equal? %b%n", Arrays.areEqual(out2[0], outList2.get(0)));
        System.out.printf("Equal? %b%n", Arrays.areEqual(out2[1], outList2.get(1)));
        System.out.printf("Equal? %b%n", Arrays.areEqual(out2[2], outList2.get(2)));
        System.out.printf("Equal? %b%n", Arrays.areEqual(out2[3], outList2.get(3)));

        //LinkedList<byte[]> outList3 = marshal(0, new byte[] { 0x0a, 0x0b, 0x0c });
        //System.out.println("Zero mtu payload: " + outList3);
        */
    }

}